<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dreams8</title><link>/</link><description></description><atom:link href="/feed.xml" rel="self"></atom:link><lastBuildDate>Thu, 17 Dec 2015 11:01:00 +0800</lastBuildDate><item><title>Roles: 增强Playbooks功能</title><link>/ansible/roles_scaling_up_your_playbooks.html</link><description>&lt;p&gt;我喜欢Ansible其中一点原因是它能更好的向上及向下扩展。我不是指你所管理的主机数量，而是想实现自动化的工作的复杂性。
在Ansible里，role主要的机制就是把playbook拆分成多个文件，这样的好处就是简化编写playbook复杂度并且可复用。比如，database role会在一批机器部署成为数据库服务器。&lt;/p&gt;
&lt;h2 id="2e0816c78d650841372945547969cb0f"&gt;Role基本结构&lt;/h2&gt;
&lt;p&gt;Ansible role都有一个名称，如role “database”，数据库相关的配置都会放在roles/database，其中包含下列文件和目录：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;roles/database/tasks/main.yml
    #任务步骤Tasks
roles/database/files/
    #存放上传到目标主机的文件
roles/database/templates/
    #存放 Jinja2 模板 files
roles/database/handlers/main.yml
    #处理程序类Handlers
roles/database/vars/main.yml
    #不可覆盖的变量
roles/database/defaults/main.yml
    #可以覆盖的缺省变量
roles/database/meta/main.yml
    #角色的依赖信息
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;每个单独的文件都是可选的。如果你的角色没有任何handlers，就没有必要放一个空的handlers/main.yml文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;Ansible 如何查找您定义的roles？&lt;/p&gt;
&lt;p&gt;Ansible将在.playbooks同目录的roles目录中查找role，当然也会在系统默认的路径/etc/ansible/roles中查找role。&lt;/p&gt;
&lt;p&gt;您可以修改ansible默认角色位置roles_path的值。
配置文件ansible.cfg：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[defaults]
roles_path = ~/ansible_roles
#默认角色路径
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以通过设置环境变量ANSIBLE_ROLES_PATH覆盖掉roles_path的值。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="18069512b7793bd62b6b20a8239a8f65"&gt;例子: Database and Mezzanine Roles&lt;/h2&gt;
&lt;p&gt;我们定义2个角色"mezzanine"及"database"部署到一台主机，请看playbook例子：&lt;/p&gt;
&lt;p&gt;mezzanine-single-host.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: deploy mezzanine on vagrant
hosts: web
vars_files:
  - secrets.yml
roles:
  - role: database
  database_name: "{{ mezzanine_proj_name }}"
  database_user: "{{ mezzanine_proj_name }}"

  - role: mezzanine
    live_hostname: 192.168.33.10.xip.io
    domains:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们使用roles，playbook里有roles的键值，roles的值是列表，包含两个角色database 和 mezzanine。
例子中我们在当前的playbook定义了database_name 和 database_user的值，假设您已经也在vars/main.yml 或 defaults/main.yml定义了，值都会被当前的playbook的值覆盖。&lt;/p&gt;
&lt;p&gt;如果role不需要定义变量，你可以简单地指定role名称，就像这样：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;roles:
  - database
  - mezzanine
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，角色database部署在db组的机器、mezzanine部署在web组的机器。请注意，此playbook包含两个独立play。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: deploy postgres on vagrant
  hosts: db
  vars_files:
    - secrets.yml
  roles:
    - role: database
    database_name: "{{ mezzanine_proj_name }}"
    database_user: "{{ mezzanine_proj_name }}"

- name: deploy mezzanine on vagrant
  hosts: web
  vars_files:
    - secrets.yml
  roles:
    - role: mezzanine
    database_host: "{{ hostvars.db.ansible_eth1.ipv4.address }}"
    live_hostname: 192.168.33.10.xip.io
    domains:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="58cac0541362a9462fa95a4b87f560ea"&gt;Pre-Tasks 及 Post-Tasks&lt;/h2&gt;
&lt;p&gt;有时候，你想在角色部署之前或之后执行某些任务。比方说，你想你部署Mezzanine之前更新apt缓存，部署之后你想发送一条通知到slack。
Ansible允许您定义角色之前执行的任务放在pre_tasks列表，角色后执行的任务放在post_tasks列表，例如：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: deploy mezzanine on vagrant
  hosts: web
  vars_files:
    - secrets.yml
  pre_tasks:
    - name: update the apt cache
      apt: update_cache=yes

  roles:
    - role: mezzanine
    database_host: "{{ hostvars.db.ansible_eth1.ipv4.address }}"
    live_hostname: 192.168.33.10.xip.io
    domains:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io

  post_tasks:
    - name: notify Slack that the servers have been updated
      local_action: &amp;gt;
      slack
      domain=acme.slack.com
      token={{ slack_token }}
      msg="web server {{ inventory_hostname }} configured"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="7ac643fdcda2e60566629ffdcf2381cc"&gt;数据库部署角色 "Database" Role&lt;/h2&gt;
&lt;p&gt;下面我们演示一下"database" role部署：安装的Postgres并创建所需的数据库及数据库用户。&lt;/p&gt;
&lt;p&gt;我们database角色包括以下文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;roles/database/tasks/main.yml&lt;/li&gt;
&lt;li&gt;roles/database/defaults/main.yml&lt;/li&gt;
&lt;li&gt;roles/database/handlers/main.yml&lt;/li&gt;
&lt;li&gt;roles/database/files/pg_hba.conf&lt;/li&gt;
&lt;li&gt;roles/database/files/postgresql.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此角色包括两个自定义的Postgres的配置文件。&lt;/p&gt;
&lt;p&gt;postgresql.conf：&lt;/p&gt;
&lt;p&gt;默认的Postgres仅接受来自本地主机的连接，所以修改默认的配置选项listen_addresses，这样Postgres将接受任何网络的连接。&lt;/p&gt;
&lt;p&gt;pg_hba.conf：&lt;/p&gt;
&lt;p&gt;Postgres认证使用的用户名和密码配置。&lt;/p&gt;
&lt;h3 id="e4bdcca4438d60f50331e9cca9258359"&gt;部署Postgres的Tasks文件&lt;/h3&gt;
&lt;p&gt;roles/database/tasks/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: install apt packages
  apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
  sudo: True
  with_items:
    - libpq-dev
    - postgresql
    - python-psycopg2
- name: copy configuration file
  copy: &amp;gt;
    src=postgresql.conf dest=/etc/postgresql/9.3/main/postgresql.conf
    owner=postgres group=postgres mode=0644
  sudo: True
  notify: restart postgres
- name: copy client authentication configuration file
  copy: &amp;gt;
    src=pg_hba.conf dest=/etc/postgresql/9.3/main/pg_hba.conf
    owner=postgres group=postgres mode=0640
  sudo: True
  notify: restart postgres
- name: create a user
  postgresql_user:
    name: "{{ database_user }}"
    password: "{{ db_pass }}"
  sudo: True
  sudo_user: postgres
- name: create the database
  postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ database_user }}"
    encoding: UTF8
    lc_ctype: "{{ locale }}"
    lc_collate: "{{ locale }}"
    template: template0
  sudo: True
  sudo_user: postgres
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="08a2ac23549ecf71bfd0f3eba680a617"&gt;部署Postgres的handlers文件&lt;/h3&gt;
&lt;p&gt;roles/database/handlers/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: restart postgres
  service: name=postgresql state=restarted
  sudo: True
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6345f1e4a5da0a74a8dfc4a17ae82f61"&gt;部署Postgres的vars文件&lt;/h3&gt;
&lt;p&gt;我们唯一需指定的变量是数据库端口。
roles/database/defaults/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;database_port: 5432
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意，以下变量没有在defaults中定义：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;database_name
database_user
db_pass
locale
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;database_name、database_user在playbook中定义。db_pass是在secrets.yml中定义，在playbook中可以看到是vars_files中导入secrets.yml。locale是指所有部署的机器，所以可以在group_vars/all定义。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;为什么有两个方法来定义角色中的变量？&lt;/p&gt;
&lt;p&gt;当Ansible刚支持roles特性时，只有vars/main.yml可定义角色的变量，vars/main.yml变量优先级比playbooks中vars键中定义高，这意味着你不能覆盖变量，除非你明确地传参数（argument）给角色。
Ansible后来推出了默认角色变量概念defaults/main.yml。这类型的变量是在角色中定义，是低优先级，因此，如果在playbook中具有相同名称变量会将其覆盖。
如果你认为你可能要会角色变量值，使用defaults/main.yml变量。如果你不希望变量改变，就使用vars/main.yml变量。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="5b88c07e1ce94bd7a568824420ac85fc"&gt;Mezzanine部署角色 "mezzanine" Role&lt;/h2&gt;
&lt;p&gt;mezzanine部署过程会部署nginx、supervisor。
具体的文件列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;roles/mezzanine/defaults/main.yml&lt;/li&gt;
&lt;li&gt;roles/mezzanine/handlers/main.yml&lt;/li&gt;
&lt;li&gt;roles/mezzanine/tasks/django.yml&lt;/li&gt;
&lt;li&gt;roles/mezzanine/tasks/main.yml&lt;/li&gt;
&lt;li&gt;roles/mezzanine/tasks/nginx.yml&lt;/li&gt;
&lt;li&gt;roles/mezzanine/templates/gunicorn.conf.py.j2&lt;/li&gt;
&lt;li&gt;roles/mezzanine/templates/local_settings.py.filters.j2&lt;/li&gt;
&lt;li&gt;roles/mezzanine/templates/local_settings.py.j2&lt;/li&gt;
&lt;li&gt;roles/mezzanine/templates/nginx.conf.j2&lt;/li&gt;
&lt;li&gt;roles/mezzanine/templates/supervisor.conf.j2&lt;/li&gt;
&lt;li&gt;roles/mezzanine/vars/main.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c8a0356be12cd795cc7cfc2859354d74"&gt;变量文件&lt;/h3&gt;
&lt;p&gt;如下面代码所示，我们定义mezzanine常量，由于ansible是没有命名空间，所以如果2个角色定义的变量名一样，可能会出现未知错误。下面例子的作法，变量名都是以role名作为前缀是比较好的作法。&lt;/p&gt;
&lt;p&gt;/mezzanine/vars/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# mezzanine vars 变量文件 
mezzanine_user: "{{ ansible_ssh_user }}"
mezzanine_venv_home: "{{ ansible_env.HOME }}"
mezzanine_venv_path: "{{ mezzanine_venv_home }}/{{ mezzanine_proj_name }}"
mezzanine_repo_url: git@github.com:lorin/mezzanine-example.git
mezzanine_proj_dirname: project
mezzanine_proj_path: "{{ mezzanine_venv_path }}/{{ mezzanine_proj_dirname }}"
mezzanine_reqs_path: requirements.txt
mezzanine_conf_path: /etc/nginx/conf
mezzanine_python: "{{ mezzanine_venv_path }}/bin/python"
mezzanine_manage: "{{ mezzanine_python }} {{ mezzanine_proj_path }}/manage.py"
mezzanine_gunicorn_port: 8000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下面的代码所示，我们定义mezzanine默认变量，这个变量就没有以role名作为前缀，因为我们会根据需要重新定义变量值。&lt;/p&gt;
&lt;p&gt;roles/mezzanine/defaults/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;tls_enabled: True
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="d37a6f4100ee7fa72d8687d247649229"&gt;任务文件&lt;/h3&gt;
&lt;p&gt;因为任务内容比较多，所以我们把task拆分到3个文件中。
mezzanine 最开始就是安装apt软件包，然后用include调用同目录的其它2个任务文件。&lt;/p&gt;
&lt;p&gt;roles/mezzanine/tasks/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: install apt packages
  apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
  sudo: True
  with_items:
    - git
    - libjpeg-dev
    - libpq-dev
    - memcached
    - nginx
    - python-dev
    - python-pip
    - python-psycopg2
    - python-setuptools
    - python-virtualenv
    - supervisor

  - include: django.yml
  - include: nginx.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;roles/mezzanine/tasks/django.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: check out the repository on the host
  git:
    repo: "{{ mezzanine_repo_url }}"
    dest: "{{ mezzanine_proj_path }}"
    accept_hostkey: yes
- name: install required python packages
  pip: name={{ item }} virtualenv={{ mezzanine_venv_path }}
  with_items:
    - gunicorn
    - setproctitle
    - south
    - psycopg2
    - django-compressor
    - python-memcached
    - name: install requirements.txt
  pip: &amp;gt;
    requirements={{ mezzanine_proj_path }}/{{ mezzanine_reqs_path }}
    virtualenv={{ mezzanine_venv_path }}
- name: generate the settings file
  template: src=local_settings.py.j2 dest={{ mezzanine_proj_path }}/local_settings.py
- name: sync the database, apply migrations, collect static content
  django_manage:
    command: "{{ item }}"
    app_path: "{{ mezzanine_proj_path }}"
    virtualenv: "{{ mezzanine_venv_path }}"
  with_items:
    - syncdb
    - migrate
    - collectstatic
- name: set the site id
  script: scripts/setsite.py
  environment:
    PATH: "{{ mezzanine_venv_path }}/bin"
    PROJECT_DIR: "{{ mezzanine_proj_path }}"
    WEBSITE_DOMAIN: "{{ live_hostname }}"
- name: set the admin password
  script: scripts/setadmin.py
  environment:
    PATH: "{{ mezzanine_venv_path }}/bin"
    PROJECT_DIR: "{{ mezzanine_proj_path }}"
    ADMIN_PASSWORD: "{{ admin_pass }}"
- name: set the gunicorn config file
  template: src=gunicorn.conf.py.j2 dest={{ mezzanine_proj_path }}/gunicorn.conf.py
- name: set the supervisor config file
  template: src=supervisor.conf.j2 dest=/etc/supervisor/conf.d/mezzanine.conf
  sudo: True
  notify: restart supervisor
- name: ensure config path exists
  file: path={{ mezzanine_conf_path }} state=directory
  sudo: True
  when: tls_enabled
- name: install poll twitter cron job
  cron: &amp;gt;
    name="poll twitter" minute="*/5" user={{ mezzanine_user }}
    job="{{ mezzanine_manage }} poll_twitter"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/mezzanine/tasks/nginx.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: set the nginx config file
  template: src=nginx.conf.j2 dest=/etc/nginx/sites-available/mezzanine.conf
  notify: restart nginx
  sudo: True
- name: enable the nginx config file
  file:
    src: /etc/nginx/sites-available/mezzanine.conf
    dest: /etc/nginx/sites-enabled/mezzanine.conf
    state: link
  notify: restart nginx
  sudo: True
- name: remove the default nginx config file
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx
  sudo: True
- name: create tls certificates
  command: &amp;gt;
    openssl req -new -x509 -nodes -out {{ mezzanine_proj_name }}.crt
    -keyout {{ mezzanine_proj_name }}.key -subj '/CN={{ domains[0] }}' -days 3650
    chdir={{ mezzanine_conf_path }}
    creates={{ mezzanine_conf_path }}/{{ mezzanine_proj_name }}.crt
  sudo: True
  when: tls_enabled
  notify: restart nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的例子中我们可以看出，使用role的方案时，当使用copy时，ansible默认查找的目录rolename/files/，当使用template时，ansible默认查找的目录rolename/templates。类似下面的改变过程：&lt;/p&gt;
&lt;p&gt;自己指定路径：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: set the nginx config file
  template: src=templates/nginx.conf.j2 \
  dest=/etc/nginx/sites-available/mezzanine.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用role方案（注意路径变化）：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: set the nginx config file
  template: src=nginx.conf.j2 dest=/etc/nginx/sites-available/mezzanine.conf
  notify: restart nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="50222a6ab004187d4e0ba053e428e85d"&gt;handlers 文件&lt;/h3&gt;
&lt;p&gt;roles/mezzanine/handlers/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- name: restart supervisor
  supervisorctl: name=gunicorn_mezzanine state=restarted
  sudo: True
- name: restart nginx
  service: name=nginx state=restarted
  sudo: True
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="60de7d5fe547c641a73e0737b6eb370b"&gt;使用ansible-galaxy创建role相关文件及目录&lt;/h2&gt;
&lt;p&gt;ansible-galaxy主要是用于下载Ansible社区分享的role部署方案。当然也可以用于初始化role的相关文件及目录。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;$ ansible-galaxy init -p playbooks/roles web --offline
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-p是指定创建目录，如果不指定就会在当时目录创建roles。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;playbooks/roles/web/tasks/main.yml
playbooks/roles/web/handlers/main.yml
playbooks/roles/web/vars/main.yml
playbooks/roles/web/defaults/main.yml
playbooks/roles/web/meta/main.yml
playbooks/roles/web/files/
playbooks/roles/web/templates/
playbooks/roles/web/README.md
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="3b2e59e2cb93f84ed2f921aa0340b86a"&gt;角色依赖&lt;/h2&gt;
&lt;p&gt;假设我们有2个角色web和database，这2个角色部署的前提是先部署NTP1服务。哪我们可以分别在这2个角色安装前先部署NTP1服务，但这样会导致重复部署NTP1。当然我们也可以新建一个NTP1的角色，但我们必须记住在部署web和database前要先部署NTP1服务，虽然避免重复但很容易忘记或出错。所以我们需要有一个调度策略是部署web和database前需要检查NTP1服务是否存在。&lt;/p&gt;
&lt;p&gt;Ansible使用角色依赖方案解决此类问题。当你定义一个角色，你可以定义它依赖于一个或多个角色，Ansible将会先执行它所依赖的角色。roles/web/meta/main.yml这个文件就是用于定义依赖关系。请看例子：&lt;/p&gt;
&lt;p&gt;roles/web/meta/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;dependencies:
  - { role: ntp, ntp_server=ntp.ubuntu.com }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然也可以指定依赖多个角色，假如django部署是依赖nginx和memcached先部署好的，我们可以如下定义：&lt;/p&gt;
&lt;p&gt;roles/django/meta/main.yml&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;dependencies:
  - { role: web }
  - { role: memcached }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="733ba000742537e7a4435573aca51393"&gt;Ansible Galaxy&lt;/h2&gt;
&lt;p&gt;如果你需要部署一个开源系统到你的主机，有可能已经有人编写成ansible role了。虽然ansible编写部署脚本很容易，但有些系统部署还是蛮棘手的。&lt;/p&gt;
&lt;p&gt;不管你是想重用别人编写好的角色部署脚本，还是说只是想看看别人是如何解决部署问题，都可以去Ansible Galaxy查找一下。Ansible Galaxy本身就是放在github上开源库。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;网站可以查找你需要部署的角色，同时也可以按类型及贡献者分类。&lt;/p&gt;
&lt;p&gt;可以使用ansible-galaxy命令下载你所需要的角色。&lt;/p&gt;
&lt;p&gt;比如我们要安装bennojoy编写的NTP server。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;$ ansible-galaxy install -p ./roles bennojoy.ntp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ansible-galaxy就会安装ntp到你的系统。&lt;/p&gt;
&lt;p&gt;输出日志应该类似这样子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;downloading role 'ntp', owned by bennojoy
no version specified, installing master
- downloading role from https://github.com/bennojoy/ntp/archive/master.tar.gz
- extracting bennojoy.ntp to ./roles/bennojoy.ntp
write_galaxy_install_info!
bennojoy.ntp was installed successfully
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ansible-galaxy就会安装ntp的文件到roles/bennojoy.ntp。&lt;/p&gt;
&lt;p&gt;你也可查看通过ansible-galaxy安装的role：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ansible-galaxy list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;卸载命令：
    ansible-galaxy remove bennojoy.ntp&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lee</dc:creator><pubDate>Thu, 17 Dec 2015 11:01:00 +0800</pubDate><guid>tag:,2015-12-17:ansible/roles_scaling_up_your_playbooks.html</guid><category>ansible</category><category>roles</category></item><item><title>Ansible节点配置文件(Inventory)</title><link>/ansible/doc_intro_inventory.html</link><description>&lt;h1 id="4d604dd8f008145471dc845683399189"&gt;&lt;a href="http://docs.ansible.com/ansible/intro_inventory.html" title="Inventory"&gt;Inventory&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Ansible通过读取默认的节点配置文件/etc/ansible/hosts，可以同时连接到多个节点上执行任务。&lt;/p&gt;
&lt;p&gt;当然，您也可以使用多个节点配置文件，以及&lt;a href="ansible/intro_dynamic_inventory.html" title="动态获取节点配置文件"&gt;动态获取节点配置文件&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="1b1689b625e9ed10478ef3e46cdc82c2"&gt;Hosts and Groups&lt;/h2&gt;
&lt;p&gt;/etc/ansible/hosts 是一种INI类型配置格式，如：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mail.example.com

[webservers]
foo.example.com
bar.example.com

[dbservers]
one.example.com
two.example.com
three.example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[]表示主机的分组名，可以按照功能、系统等进行分类，便于对某些主机或者某一组功能相同的主机进行操作。&lt;/p&gt;
&lt;p&gt;一台主机属多个组是没有问题的，例如一台服务器既是网络服务器也是数据库服务器，所以可以放在webserver组和dbserver组。但需要注意的，主机上的属性变量会继承所有组的&lt;code&gt;vars&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果某些主机使用非标准的SSH端口，你可以在的主机名之后添加冒号及端口号。当SSH的配置文件中指定端口将不会使用paramiko进行连接，但可以使用openssh进行ssh连接。&lt;/p&gt;
&lt;p&gt;为了简单明了，因此建议，不是使用默认22端口的机器，您可以如下设置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;badwolf.example.com:5309
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假如你想要为某些静态IP设置一些别名，或者通过tunnels进行连接。你可以这样定义：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;jumper ansible_port=5555 ansible_host=192.168.1.50
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的例子中，ansible可以通过别名“jumper”（不一定是真正的主机名）连接192.168.1.50端口5555。请注意，这是使用节点配置文件来定义一些特殊的变量。一般来说，这不是定义变量的最佳方式，后面还有其它方式。&lt;/p&gt;
&lt;p&gt;需加入大量的主机？如果主机名类似以下模式，你可以仿照下面样例的做法，而不需要列出每个主机：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[webservers]
www[01:50].example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;表示从www01到www50，共计50台主机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于数字模式，可以根据需求使用前缀0，上面例子是包括0，表示www01、www02。若不使用0，可定义成www[1:50]，表示www1、www2。
您还可以使用字母定义可变范围，例如：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[databases]
db-[a:f].example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;表示从db-a到db-f，共计7台主机&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;Ansible2.0已经把ansible_ssh_user，ansible_ssh_host和ansible_ssh_port精简成ansible_user，ansible_host和ansible_port。如果您使用Ansible2.0之前版本，你应该继续使用老式变量（ansible_ssh_*）。在Ansible旧版本中，不带“ssh”的变量会被忽略，没有任何警告。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;对于每台主机的连接类型、连接用户等信息你都可以自定义，例如：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[targets]

localhost              ansible_connection=local
other1.example.com     ansible_connection=ssh        ansible_user=mpdehaan
other2.example.com     ansible_connection=ssh        ansible_user=mdehaan
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于上面的定义方式，仅仅是针对每台主机的一个快速定义，随后将会讨论如何在host_vars目录下的单个文件中定义。&lt;/p&gt;
&lt;h2 id="f19f030e08cd706e4c1138f78d2f547d"&gt;Host Variables&lt;/h2&gt;
&lt;p&gt;如上文提到，playbooks使用的变量，我们很容易就可以在单机或多台主机上定义：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[atlanta]
host1 http_port=80 maxRequestsPerChild=808
host2 http_port=303 maxRequestsPerChild=909
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="9103d1ef1102fa3eed5c3d7b3480e11a"&gt;Group Variables&lt;/h2&gt;
&lt;p&gt;变量也可以通过组名应用到组内的所有成员：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[atlanta]
host1
host2

[atlanta:vars]
ntp_server=ntp.atlanta.example.com
proxy=proxy.atlanta.example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="d95f70410f2aac5cc20662967e2a2ad4"&gt;Groups of Groups, and Group Variables&lt;/h2&gt;
&lt;p&gt;另外，定义主机组之间的继承关系使用&lt;code&gt;:children&lt;/code&gt;作为后缀。就像上文，主机组内共同的变量使用&lt;code&gt;:vars&lt;/code&gt;作为后缀：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[atlanta]
host1
host2

[raleigh]
host2
host3

#southeast组包含atlanta和raleigh的机器
[southeast:children]
atlanta
raleigh

[southeast:vars]
some_server=foo.southeast.example.com
halon_system_timeout=30
self_destruct_countdown=60
escape_pods=2

[usa:children]
southeast
northeast
southwest
northwest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你需要存储列表或hash数据，或需要从节点配置文件中分离出主机和组的具体变量，请参阅下一节。&lt;/p&gt;
&lt;h2 id="27b3b29ed70087f4d5ead6d0ed9ec322"&gt;Splitting Out Host and Group Specific Data&lt;/h2&gt;
&lt;p&gt;Ansible并不建议变量存储在节点配置文件中。除了直接在主INI文件存储变量，主机或组的变量都可以存储在另外单独的文件中。
单独的变量文件必须遵循YAML语法。有效的文件扩展名包括“.yml”，“.yaml”，“.json”，或没有文件扩展名。关于YAML语法请参阅：&lt;a href="ansible/YAMLSyntax.html" title="YAMLSyntax"&gt;YAMLSyntax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设节点配置文件路径:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/etc/ansible/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果主机名是“foosball”，两个组名分别是“raleigh”、“webservers”，以下路径的yaml文件中的变量将会应用到对应的主机上：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/etc/ansible/group_vars/raleigh # 可使用扩展名是'.yml','.yaml','.json'
/etc/ansible/group_vars/webservers
/etc/ansible/host_vars/foosball
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，您是通过服务器功能划分不同的机器到不同分组。raleigh组的机器有共同的变量，比如“/etc/ansible/group_vars/raleigh”内容：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;---
ntp_server: acme.example.org
database_server: storage.example.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然即使上面文件不存在也是没有问题的，因为这是一项可选功能。&lt;/p&gt;
&lt;p&gt;还有一种高级用法，您可以创建以组或主机的名字命名的目录，Ansible会读这些目录中的所有文件。请看例子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/etc/ansible/group_vars/raleigh/db_settings
/etc/ansible/group_vars/raleigh/cluster_settings
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有在“raleigh”组的主机都有这些文件中定义的变量。当变量文件过大或当你想使用&lt;a href="ansible/playbooks_vault.html" title="Ansible Vault"&gt;Ansible Vault &lt;/a&gt;保存变量，使用这种方式组织变量都是非常有用。请注意，这仅适用于Ansible1.4或更高版本。&lt;/p&gt;
&lt;p&gt;提示：在Ansible1.2或更高版本的group_vars/和host_vars/目录既可以在playbook所在目录或inventory目录中。如果两个路径存在，playbook目录变量将覆盖inventory目录中设置的变量。&lt;/p&gt;
&lt;p&gt;提示：跟踪主机及变量变更的方案是把节点配置文件和变量存放在git（或其他版本控制系统）。&lt;/p&gt;
&lt;h2 id="729878131a937e929636aeb9bab46ac6"&gt;List of Behavioral Inventory Parameters&lt;/h2&gt;
&lt;p&gt;正如上面提到的，ansible可以设置下面的变量控制与远程主机的连接参数。&lt;/p&gt;
&lt;p&gt;Host connection:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ansible_connection
  #与主机的连接方式。可选local, smart, ssh 或 paramiko。默认值是 smart.
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;Ansible2.0已经把ansible_ssh_user，ansible_ssh_host和ansible_ssh_port精简成ansible_user，ansible_host和ansible_port。如果您使用Ansible2.0之前版本，你应该继续使用老式变量（ansible_ssh_*）。在Ansible旧版本中，不带“ssh”的变量会被忽略，没有任何警告。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;SSH 连接参数：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ansible_host
  #连接主机的名称。你可以定义你想要的不同别名。
ansible_port
  #ssh 端口号。如果不是22，需要定义。
ansible_user
  #默认使用ssh 用户名。
ansible_ssh_pass
  The ssh password to use (this is insecure, we strongly recommend using --ask-pass or SSH keys)
ansible_ssh_private_key_file
  Private key file used by ssh.  Useful if using multiple keys and you don't want to use SSH agent.
ansible_ssh_common_args
  This setting is always appended to the default command line for
  sftp, scp, and ssh. Useful to configure a ``ProxyCommand`` for a
  certain host (or group).
ansible_sftp_extra_args
  This setting is always appended to the default sftp command line.
ansible_scp_extra_args
  This setting is always appended to the default scp command line.
ansible_ssh_extra_args
  This setting is always appended to the default ssh command line.
ansible_ssh_pipelining
  Determines whether or not to use SSH pipelining. This can override the
  ``pipelining`` setting in ``ansible.cfg``.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;升级特权(see :doc:&lt;code&gt;Ansible Privilege Escalation&amp;lt;become&amp;gt;&lt;/code&gt; for further details)::&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ansible_become
  #相当于ansible_sudo或ansible_su，允许强制特权升级。
ansible_become_method
  #允许设置特权升级方法。
ansible_become_user
  Equivalent to ansible_sudo_user or ansible_su_user, allows to set the user you become through privilege escalation
ansible_become_pass
  Equivalent to ansible_sudo_pass or ansible_su_pass, allows you to set the privilege escalation password
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;远程主机环境参数：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ansible_shell_type
  The shell type of the target system. Commands are formatted using 'sh'-style syntax by default. Setting this to 'csh' or 'fish' will cause commands executed on target systems to follow those shell's syntax instead.
ansible_python_interpreter
  The target host python path. This is useful for systems with more
  than one Python or not located at "/usr/bin/python" such as \*BSD, or where /usr/bin/python
  is not a 2.X series Python.  We do not use the "/usr/bin/env" mechanism as that requires the remote user's
  path to be set right and also assumes the "python" executable is named python, where the executable might
  be named something like "python26".
ansible\_\*\_interpreter
  Works for anything such as ruby or perl and works just like ansible_python_interpreter.
  This replaces shebang of modules which will run on that host.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;some_host         ansible_port=2222     ansible_user=manager
aws_host          ansible_ssh_private_key_file=/home/example/.ssh/aws.pem
freebsd_host      ansible_python_interpreter=/usr/local/bin/python
ruby_module_host  ansible_ruby_interpreter=/usr/bin/ruby.1.9.3
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="b932cc6b9dbe0d292506132d5bdbbdd7"&gt;seealso:&lt;/h2&gt;
&lt;p&gt;:doc:&lt;code&gt;intro_dynamic_inventory&lt;/code&gt;
       Pulling inventory from dynamic sources, such as cloud providers
   :doc:&lt;code&gt;intro_adhoc&lt;/code&gt;
       Examples of basic commands
   :doc:&lt;code&gt;playbooks&lt;/code&gt;
       Learning Ansible’s configuration, deployment, and orchestration language.
   &lt;code&gt;Mailing List &amp;lt;http://groups.google.com/group/ansible-project&amp;gt;&lt;/code&gt;&lt;em&gt;
       Questions? Help? Ideas?  Stop by the list on Google Groups
   &lt;code&gt;irc.freenode.net &amp;lt;http://irc.freenode.net&amp;gt;&lt;/code&gt;&lt;/em&gt;
       #ansible IRC chat channel&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lee</dc:creator><pubDate>Tue, 15 Dec 2015 14:01:00 +0800</pubDate><guid>tag:,2015-12-15:ansible/doc_intro_inventory.html</guid><category>ansible</category><category>inventory</category></item></channel></rss>
